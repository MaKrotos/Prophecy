name: Frontend Docker CI

on:
  push:
    branches: ["main"]
    paths:
      - "Frontend/**"
      - ".github/workflows/frontend-docker.yml"
  pull_request:
    branches: ["main"]
    paths:
      - "Frontend/**"
  workflow_dispatch:

jobs:
  build-and-push-frontend:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch') &&
      !contains(github.event.head_commit.message, 'Backend/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Allow insecure registry
        run: |
          echo '{ "insecure-registries":["${{ secrets.REGISTRY_URL }}"] }' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Private Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_URL }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build Docker image
        run: |
          cd Frontend
          docker build --target prod -t ${{ secrets.REGISTRY_URL }}/makrotos/prophecy-frontend:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.REGISTRY_URL }}/makrotos/prophecy-frontend:latest

      - name: Get commit history
        id: commits
        run: |
          # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—É—à–∞ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ
          if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            COMMITS=$(git log --oneline --no-decorate ${{ github.event.before }}..${{ github.event.after }} -- Frontend/ --format="‚Ä¢ %s (%h)" | sed 's/"/\\"/g')
          else
            # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–æ–º–º–∏—Ç–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏–ª–∏ workflow_dispatch
            COMMITS=$(git log --oneline --no-decorate -10 -- Frontend/ --format="‚Ä¢ %s (%h)" | sed 's/"/\\"/g')
          fi
          
          # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å Frontend, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –∫–æ–º–º–∏—Ç—ã
          if [ -z "$COMMITS" ]; then
            if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
              COMMITS=$(git log --oneline --no-decorate ${{ github.event.before }}..${{ github.event.after }} --format="‚Ä¢ %s (%h)" | sed 's/"/\\"/g')
            else
              COMMITS=$(git log --oneline --no-decorate -10 --format="‚Ä¢ %s (%h)" | sed 's/"/\\"/g')
            fi
          fi
          
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ output
          echo "commits_list<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send Telegram notification via API
        run: |
          MESSAGE=$(cat <<EOF
          üé® <b>Frontend –æ–±–Ω–æ–≤–ª—ë–Ω!</b>
          üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã:</b>
          ${{ steps.commits.outputs.commits_list }}
          
          üéØ <b>Target:</b> production
          EOF
          )
          
          # –§–æ—Ä–º–∏—Ä—É–µ–º JSON –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
          JSON_DATA=$(jq -n \
            --arg chat_id "${{ secrets.TELEGRAM_CHAT_ID }}" \
            --arg text "$MESSAGE" \
            --arg parse_mode "HTML" \
            '{
              chat_id: $chat_id,
              text: $text,
              parse_mode: $parse_mode,
              disable_web_page_preview: true
            }')
          
          # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "$JSON_DATA" \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

  test-frontend:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' &&
      !contains(github.event.pull_request.head.sha, 'Backend/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Frontend Docker image (test)
        run: |
          cd Frontend
          docker build --target prod -t prophecy-frontend:test .
