import { ref, computed } from 'vue'

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
export const supportedLocales = ['ru', 'en']

// –¢–µ–∫—É—â–∞—è –ª–æ–∫–∞–ª—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∞—è)
export const currentLocale = ref('ru')

// –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
export const translations = ref({})

// –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª–µ–π —Å –ø–æ–º–æ—â—å—é import.meta.glob
const localeModules = import.meta.glob('./*.json', { import: 'default', eager: true })

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
export const loadLocaleMessages = async (locale) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
    const modulePath = `./${locale}.json`
    if (localeModules[modulePath]) {
      translations.value[locale] = localeModules[modulePath]
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è –ª–æ–∫–∞–ª–∏: ${locale}`)
    } else {
      throw new Error(`Locale file not found: ${locale}.json`)
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –ª–æ–∫–∞–ª–∏ ${locale}:`, error)
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
export const initLocalization = async () => {
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ª–æ–∫–∞–ª–∏
  for (const locale of supportedLocales) {
    await loadLocaleMessages(locale)
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ª–æ–∫–∞–ª—å –∏–∑ Telegram WebApp, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
  const telegramLocale = getTelegramLocale()
  if (telegramLocale && supportedLocales.includes(telegramLocale)) {
    currentLocale.value = telegramLocale
  } else {
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
    currentLocale.value = 'ru'
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏–∑ Telegram WebApp
export const getTelegramLocale = () => {
  if (typeof window !== 'undefined' && window.Telegram?.WebApp?.initDataUnsafe?.user?.language_code) {
    const langCode = window.Telegram.WebApp.initDataUnsafe.user.language_code
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–¥ —è–∑—ã–∫–∞ –∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º –ª–æ–∫–∞–ª—è–º
    // –ù–∞–ø—Ä–∏–º–µ—Ä, 'en-US' -> 'en', 'ru-RU' -> 'ru'
    const shortLangCode = langCode.split('-')[0].toLowerCase()
    return shortLangCode
  }
  return null
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ –∫–ª—é—á—É
export const t = (key, params = {}) => {
  const locale = currentLocale.value
  const messages = translations.value[locale]
  
  if (!messages) {
    console.warn(`–ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –ª–æ–∫–∞–ª–∏: ${locale}`)
    return key
  }
  
  // –ò—â–µ–º –ø–µ—Ä–µ–≤–æ–¥ –ø–æ –∫–ª—é—á—É (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É)
  const keys = key.split('.')
  let translation = messages
  
  for (const k of keys) {
    if (translation && typeof translation === 'object' && k in translation) {
      translation = translation[k]
    } else {
      console.warn(`–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–ª—é—á–∞: ${key} –≤ –ª–æ–∫–∞–ª–∏: ${locale}`)
      return key
    }
  }
  
  // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∑–∞–º–µ–Ω—è–µ–º –∏—Ö –≤ —Å—Ç—Ä–æ–∫–µ
  if (typeof translation === 'string' && Object.keys(params).length > 0) {
    return translation.replace(/\{(\w+)\}/g, (match, key) => {
      return params[key] !== undefined ? params[key] : match
    })
  }
  
  return translation
}

// –ö–æ–º–ø–æ–∑–∏—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export const useLocalization = () => {
  const locale = computed(() => currentLocale.value)
  
  const changeLocale = (newLocale) => {
    if (supportedLocales.includes(newLocale)) {
      currentLocale.value = newLocale
      console.log(`üåê –õ–æ–∫–∞–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${newLocale}`)
    } else {
      console.warn(`üö´ –õ–æ–∫–∞–ª—å ${newLocale} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`)
    }
  }
  
  return {
    locale,
    changeLocale,
    t
  }
}