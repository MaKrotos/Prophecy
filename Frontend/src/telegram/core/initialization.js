import { isInTelegramWebView } from './detection.js';
import { isValidTelegramWebApp } from './validation.js'
import { applyThemeColors, setupThemeListeners } from '../theme/manager.js';
import { extractAuthData, logAuthData } from '../auth/data.js';
import { showTelegramOnlyMessage } from '../ui/messages.js';

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp
 */

export function initTelegramWebApp(callbacks = {}) {
  const {
    onUserDetected = () => {},
    onReady = () => {},
    onError = () => {},
    onHashReceived = () => {},
    onThemeChanged = () => {},
    onNotInTelegram = () => {},
    onViewportChanged = () => {},
  } = callbacks;

  if (typeof window === "undefined") {
    onError(new Error("Window object not available"));
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –≤ Telegram
  if (!isInTelegramWebView()) {
    console.warn("‚ö†Ô∏è App is not running in Telegram WebView");
    onNotInTelegram();
    return;
  }

  // –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω
  if (window.Telegram?.WebApp) {
    initializeTelegramFeatures(callbacks);
    return;
  }

  loadTelegramSDK(callbacks);
}

function loadTelegramSDK(callbacks) {
  const script = document.createElement("script");
  script.src = "https://telegram.org/js/telegram-web-app.js";
  script.async = true;

  script.onload = () => {
    console.log("Telegram WebApp SDK loaded");
    initializeTelegramFeatures(callbacks);
  };

  script.onerror = () => {
    console.error("Failed to load Telegram WebApp SDK");
    callbacks.onError(new Error("Failed to load Telegram WebApp SDK"));
  };

  document.head.appendChild(script);
}

function initializeTelegramFeatures(callbacks) {
  try {
    if (!window.Telegram?.WebApp) {
      throw new Error("Telegram WebApp API not available");
    }

    const webApp = window.Telegram.WebApp;

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ initData
    if (!isValidTelegramWebApp(webApp)) {
      console.warn("‚ö†Ô∏è Telegram WebApp data is invalid or missing");
      callbacks.onNotInTelegram();
      showTelegramOnlyMessage();
      return;
    }

    // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebApp
    setupWebApp(webApp);
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
    setupThemeListeners(webApp, callbacks.onThemeChanged);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ auth –¥–∞–Ω–Ω—ã—Ö
    processAuthData(webApp, callbacks);
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logDebugInfo(webApp);

    callbacks.onReady();
  } catch (error) {
    console.error("Error initializing Telegram WebApp:", error);
    callbacks.onError(error);
  }
}

function setupWebApp(webApp) {
  webApp.ready?.();
  webApp.expand();
  webApp.enableClosingConfirmation();
}

function processAuthData(webApp, callbacks) {
  const authData = extractAuthData(webApp);
  
  if (authData.hash) {
    console.log("üîê Authentication HASH for server verification:", authData.hash);
    callbacks.onHashReceived(authData.hash, authData.initData);
  }

  if (authData.user) {
    console.log("üë§ Telegram User Data:", authData.user);
    callbacks.onUserDetected(authData.user);
  } else {
    console.log("‚ÑπÔ∏è No Telegram user data found");
  }

  logAuthData(authData);
}

function logDebugInfo(webApp) {
  console.log("üåê Telegram WebApp version:", webApp.version);
  console.log("üì± Platform:", webApp.platform);
  console.log("üé® Theme:", webApp.colorScheme);
  console.log("üé® Theme Params:", webApp.themeParams);
}