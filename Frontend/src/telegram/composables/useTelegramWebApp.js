import { ref, onMounted } from 'vue';
import { initTelegramWebApp, getTelegramAuthData } from '../index.js';
import { hasValidToken, saveJWTToken, clearJWTToken } from '../auth/jwt.js';
import { useTelegramAuth } from './useTelegramAuth.js';
import { useTelegramTheme } from './useTelegramTheme.js';
import { waitForCondition } from '../utils/retry.js';

/**
 * –ì–ª–∞–≤–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram WebApp
 */
export function useTelegramWebApp() {
  // Reactive state
  const telegramUser = ref(null);
  const isTelegram = ref(false);
  const isTelegramReady = ref(false);
  const initializationError = ref(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
  const { themeParams, isDarkTheme, applyThemeToApp, refreshTheme } = useTelegramTheme();
  const { 
    authError, 
    isAuthenticating, 
    needsReauth, 
    checkTelegramIdConsistency, 
    performAuth, 
    retryAuth, 
    clearAuthError 
  } = useTelegramAuth(
    telegramUser, 
    getTelegramAuthData, 
    hasValidToken, 
    saveJWTToken, 
    clearJWTToken
  );

  // Auth data
  const authHash = ref(null);
  const authData = ref(null);
  const jwtToken = ref(hasValidToken() ? localStorage.getItem('jwt_token') : null);

  onMounted(() => {
    initTelegramWebAppWithRetry();
  });

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
   */
  const initTelegramWebAppWithRetry = async (retryCount = 0, maxRetries = 15) => {
    try {
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp #${retryCount + 1}`);

      initTelegramWebApp({
        onUserDetected: (user) => {
          telegramUser.value = user;
          console.log('‚úÖ Telegram user detected:', user);
        },
        onReady: () => {
          handleTelegramReady();
        },
        onError: (error) => {
          handleTelegramError(error, retryCount, maxRetries);
        },
        onHashReceived: (hash, initData) => {
          authHash.value = hash;
          authData.value = initData;
          console.log('‚úÖ Authentication hash received and stored');
        },
        onThemeChanged: (theme) => {
          themeParams.value = theme;
          applyThemeToApp(theme);
          console.log('üé® Theme changed:', theme);
        },
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
      checkReadiness(retryCount, maxRetries);
    } catch (error) {
      handleTelegramError(error, retryCount, maxRetries);
    }
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Telegram
   */
  const handleTelegramReady = () => {
    isTelegram.value = true;
    isTelegramReady.value = true;
    initializationError.value = null;
    console.log('‚úÖ Telegram WebApp READY');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    if (hasValidToken()) {
      jwtToken.value = localStorage.getItem('jwt_token');
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π JWT —Ç–æ–∫–µ–Ω');
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
    const tgData = getTelegramAuthData();
    if (tgData?.themeParams) {
      applyThemeToApp(tgData.themeParams);
    }
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram
   */
  const handleTelegramError = (error, retryCount, maxRetries) => {
    console.error('‚ùå Telegram WebApp error:', error);
    initializationError.value = error;

    if (retryCount < maxRetries) {
      setTimeout(() => {
        initTelegramWebAppWithRetry(retryCount + 1, maxRetries);
      }, 200);
    }
  };

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Telegram
   */
  const checkReadiness = (retryCount, maxRetries) => {
    setTimeout(() => {
      if (!isTelegramReady.value && retryCount < maxRetries) {
        console.log(`‚è≥ Telegram –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ #${retryCount + 1}`);
        initTelegramWebAppWithRetry(retryCount + 1, maxRetries);
      } else if (!isTelegramReady.value) {
        console.warn(`‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ (${maxRetries}), –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ Telegram`);
      }
    }, 300);
  };

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Telegram
   */
  const waitForTelegramReady = (timeout = 5000) => {
    return waitForCondition(() => isTelegramReady.value, timeout);
  };

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   */
  const logout = () => {
    clearJWTToken();
    jwtToken.value = null;
    console.log('üì§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
  };

  return {
    // State
    telegramUser,
    isTelegram,
    authHash,
    authData,
    themeParams,
    isDarkTheme,
    jwtToken,
    isTelegramReady,
    initializationError,
    
    // Auth
    authError,
    isAuthenticating,
    needsReauth,
    hasValidToken,
    
    // Methods
    sendAuthToServer: performAuth,
    getAuthData: getTelegramAuthData,
    refreshTheme: () => refreshTheme(getTelegramAuthData),
    applyThemeToApp,
    logout,
    waitForTelegramReady,
    saveJWTToken,
    clearJWTToken,
    checkTelegramIdConsistency,
    retryAuth,
    clearAuthError
  };
}