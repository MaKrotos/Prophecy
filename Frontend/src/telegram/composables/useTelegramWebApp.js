import { ref, onMounted } from "vue";
import {
  initTelegramWebApp,
  getTelegramAuthData,
  applyThemeColors,
  isDarkTheme as checkDarkTheme,
  sendAuthToServer as sendAuthToServerUtil,
  prepareAuthPayload,
} from "../index.js";
import { saveJWTToken, clearJWTToken, hasValidToken } from "../auth/jwt.js";

export function useTelegramWebApp() {
  const telegramUser = ref(null);
  const isTelegram = ref(false);
  const authHash = ref(null);
  const authData = ref(null);
  const themeParams = ref(null);
  const isDarkTheme = ref(false);
  const jwtToken = ref(null);
  const isTelegramReady = ref(false);
  const initializationError = ref(null);

  onMounted(() => {
    initTelegramWebAppWithRetry();
  });

  const initTelegramWebAppWithRetry = async (
    retryCount = 0,
    maxRetries = 15
  ) => {
    try {
      console.log(
        `üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp #${retryCount + 1}`
      );

      initTelegramWebApp({
        onUserDetected: (user) => {
          telegramUser.value = user;
          console.log("‚úÖ Telegram user detected:", user);
        },
        onReady: () => {
          isTelegram.value = true;
          isTelegramReady.value = true;
          initializationError.value = null;
          console.log("‚úÖ Telegram WebApp READY");

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
          if (hasValidToken()) {
            jwtToken.value = localStorage.getItem("jwt_token");
            console.log("‚úÖ –ù–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π JWT —Ç–æ–∫–µ–Ω");
          }

          // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–º—ã –ø–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
          const tgData = getTelegramAuthData();
          if (tgData?.themeParams) {
            themeParams.value = tgData.themeParams;
            applyThemeToApp(themeParams.value);
          }
        },
        onError: (error) => {
          console.error("‚ùå Telegram WebApp error:", error);
          initializationError.value = error;

          // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
          if (retryCount < maxRetries) {
            setTimeout(() => {
              initTelegramWebAppWithRetry(retryCount + 1, maxRetries);
            }, 200);
          }
        },
        onHashReceived: (hash, initData) => {
          authHash.value = hash;
          authData.value = initData;
          console.log("‚úÖ Authentication hash received and stored");
        },
        onThemeChanged: (theme) => {
          themeParams.value = theme;
          applyThemeToApp(theme);
          console.log("üé® Theme changed:", theme);
        },
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
      setTimeout(() => {
        if (!isTelegramReady.value && retryCount < maxRetries) {
          console.log(
            `‚è≥ Telegram –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ #${retryCount + 1}`
          );
          initTelegramWebAppWithRetry(retryCount + 1, maxRetries);
        } else if (!isTelegramReady.value) {
          console.warn(
            `‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ (${maxRetries}), –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ Telegram`
          );
        }
      }, 300);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:", error);
      initializationError.value = error;
      if (retryCount < maxRetries) {
        setTimeout(() => {
          initTelegramWebAppWithRetry(retryCount + 1, maxRetries);
        }, 200);
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Telegram
  const waitForTelegramReady = (timeout = 5000) => {
    return new Promise((resolve, reject) => {
      if (isTelegramReady.value) {
        resolve(true);
        return;
      }

      const startTime = Date.now();
      const checkInterval = setInterval(() => {
        if (isTelegramReady.value) {
          clearInterval(checkInterval);
          resolve(true);
        } else if (Date.now() - startTime > timeout) {
          clearInterval(checkInterval);
          console.warn(`‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è Telegram WebApp (${timeout}ms)`);
          reject(
            new Error(`Telegram WebApp initialization timeout (${timeout}ms)`)
          );
        }
      }, 50);
    });
  };

  const applyThemeToApp = (theme) => {
    if (!theme) return;

    applyThemeColors(theme);
    isDarkTheme.value = checkDarkTheme(theme);

    if (isDarkTheme.value) {
      document.body.classList.add("tg-theme-dark");
      document.body.classList.remove("tg-theme-light");
    } else {
      document.body.classList.add("tg-theme-light");
      document.body.classList.remove("tg-theme-dark");
    }

    console.log("üé® Theme applied to app");
  };

  const sendAuthToServer = async (
    endpoint = "/api/auth/telegram",
    maxRetries = 3
  ) => {
    // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Telegram –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    try {
      await waitForTelegramReady(3000);
    } catch (error) {
      console.warn("‚ö†Ô∏è Telegram –Ω–µ –≥–æ—Ç–æ–≤, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é:", error);
    }

    const currentAuthData = getTelegramAuthData();
    if (!currentAuthData?.hash) {
      console.warn("No auth hash available");
      throw new Error("No authentication data available");
    }

    const payload = prepareAuthPayload({
      ...currentAuthData,
      themeParams: themeParams.value,
    });

    let lastError;

    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
    for (let attempt = 0; attempt <= maxRetries; attempt++) {
      try {
        console.log(`üì§ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ #${attempt + 1}/${maxRetries + 1}`);
        const result = await sendAuthToServerUtil(payload, endpoint);

        if (result && result.token) {
          saveJWTToken(result.token);
          jwtToken.value = result.token;
          console.log("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");
          return result;
        } else {
          throw new Error("–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–æ–∫–µ–Ω");
        }
      } catch (error) {
        lastError = error;
        console.warn(
          `‚ùå –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ #${attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å:`,
          error.message
        );

        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∂–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
        if (attempt < maxRetries) {
          // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1s, 2s, 4s, ...
          const delay = Math.pow(2, attempt) * 1000;
          console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}ms –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
          await new Promise((resolve) => setTimeout(resolve, delay));
        }
      }
    }

    // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    clearJWTToken();
    jwtToken.value = null;
    throw lastError;
  };

  const getCurrentAuthData = () => {
    return getTelegramAuthData();
  };

  const refreshTheme = () => {
    const tgData = getTelegramAuthData();
    if (tgData?.themeParams) {
      themeParams.value = tgData.themeParams;
      applyThemeToApp(themeParams.value);
    }
  };

  const logout = () => {
    clearJWTToken();
    jwtToken.value = null;
    console.log("üì§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
  };

  return {
    telegramUser,
    isTelegram,
    authHash,
    authData,
    themeParams,
    isDarkTheme,
    jwtToken,
    isTelegramReady,
    initializationError,
    sendAuthToServer,
    getAuthData: getCurrentAuthData,
    refreshTheme,
    applyThemeToApp,
    logout,
    hasValidToken,
    waitForTelegramReady,
    saveJWTToken,
    clearJWTToken,
  };
}
