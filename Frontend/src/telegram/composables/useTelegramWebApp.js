import { ref, onMounted } from "vue";
import { initTelegramWebApp, getTelegramAuthData } from "../index.js";
import { hasValidToken, saveJWTToken, clearJWTToken } from "../auth/jwt.js";
import { useTelegramAuth } from "./useTelegramAuth.js";
import { useTelegramTheme } from "./useTelegramTheme.js";
import { waitForCondition } from "../utils/retry.js";
import { useRouter } from "vue-router";

/**
 * –ì–ª–∞–≤–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram WebApp
 */
export function useTelegramWebApp() {
  // Router
  const router = useRouter();

  // Reactive state
  const telegramUser = ref(null);
  const isTelegram = ref(false);
  const isTelegramReady = ref(false);
  const initializationError = ref(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
  const { themeParams, isDarkTheme, applyThemeToApp, refreshTheme } =
    useTelegramTheme();
  const {
    authError,
    isAuthenticating,
    needsReauth,
    checkTelegramIdConsistency,
    performAuth,
    retryAuth,
    clearAuthError,
  } = useTelegramAuth(
    telegramUser,
    getTelegramAuthData,
    hasValidToken,
    saveJWTToken,
    clearJWTToken
  );

  // Auth data
  const authHash = ref(null);
  const authData = ref(null);
  const startParam = ref(null);
  const jwtToken = ref(
    hasValidToken() ? localStorage.getItem("jwt_token") : null
  );

  onMounted(() => {
    initTelegramWebAppWithRetry();
  });

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
   */
  const initTelegramWebAppWithRetry = async (
    retryCount = 0,
    maxRetries = 15
  ) => {
    try {
      console.log(
        `üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp #${retryCount + 1}`
      );

      initTelegramWebApp({
        onUserDetected: (user) => {
          telegramUser.value = user;
          console.log("‚úÖ Telegram user detected:", user);
        },
        onReady: () => {
          handleTelegramReady();
        },
        onError: (error) => {
          handleTelegramError(error, retryCount, maxRetries);
        },
        onHashReceived: (hash, initData, startParamValue) => {
          console.log("üîç onHashReceived called with:", {
            hash,
            initData,
            startParamValue,
          });
          authHash.value = hash;
          authData.value = initData;
          startParam.value = startParamValue;
          console.log("‚úÖ Authentication hash received and stored");
          console.log(
            "üîó Start param received in onHashReceived:",
            startParamValue
          );
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è startParam
          if (startParamValue) {
            console.log(
              "üîç –ó–Ω–∞—á–µ–Ω–∏–µ startParam –≤ onHashReceived:",
              startParamValue
            );
          } else {
            console.log("‚ö†Ô∏è –ó–Ω–∞—á–µ–Ω–∏–µ startParam –ø—É—Å—Ç–æ–µ –≤ onHashReceived");
          }
        },
        onThemeChanged: (theme) => {
          themeParams.value = theme;
          applyThemeToApp(theme);
          console.log("üé® Theme changed:", theme);
        },
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
      checkReadiness(retryCount, maxRetries);
    } catch (error) {
      handleTelegramError(error, retryCount, maxRetries);
    }
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Telegram
   */
  const handleTelegramReady = () => {
    isTelegram.value = true;
    isTelegramReady.value = true;
    initializationError.value = null;
    console.log("‚úÖ Telegram WebApp READY");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    if (hasValidToken()) {
      jwtToken.value = localStorage.getItem("jwt_token");
      console.log("‚úÖ –ù–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π JWT —Ç–æ–∫–µ–Ω");
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
    const tgData = getTelegramAuthData();
    if (tgData?.themeParams) {
      applyThemeToApp(tgData.themeParams);
    }

    console.log("üîç Telegram WebApp ready, startParam:", startParam.value);

    // –ï—Å–ª–∏ –µ—Å—Ç—å startParam, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
    if (startParam.value) {
      console.log("üîó –ù–∞–π–¥–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä startParam:", startParam.value);
      console.log("üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É startParam –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏");
      // –ü–∞—Ä—Å–∏–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä
      parseAndHandleStartParam(startParam.value);
      console.log("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ startParam –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
      console.log("üîç –ó–Ω–∞—á–µ–Ω–∏–µ startParam –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:", startParam.value);
    } else {
      console.log("‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä startParam –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
    }
  };

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ startParam
   */
  const parseAndHandleStartParam = (param) => {
    console.log("üîç –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ startParam:", param);
    if (!param) {
      console.log("‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä startParam –ø—É—Å—Ç–æ–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
      return;
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ "_"
    const parts = param.split("_");
    const action = parts[0];
    const args = parts.slice(1);

    console.log("üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ startParam:", { action, args });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    const handlers = {
      join_session: (sessionId) => {
        console.log(
          "üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è join_session —Å sessionId:",
          sessionId
        );
        if (sessionId) {
          console.log(
            "üîó –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ—Å—Å–∏–∏:",
            sessionId
          );
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
          setTimeout(() => {
            router.push(`/sessions/join/${sessionId}`);
          }, 100);
        } else {
          console.log("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω sessionId –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è join_session");
        }
        // –û–±–Ω—É–ª—è–µ–º startParam, —á—Ç–æ–±—ã –æ–Ω –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        console.log("üßπ –û–±–Ω—É–ª–µ–Ω–∏–µ startParam –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ join_session");
        startParam.value = null;
      },
      // –ü—Ä–∏–º–µ—Ä—ã –¥—Ä—É–≥–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
      invite_user: (userId) => {
        if (userId) {
          console.log("üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId);
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        }
        // –û–±–Ω—É–ª—è–µ–º startParam, —á—Ç–æ–±—ã –æ–Ω –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        console.log("üßπ –û–±–Ω—É–ª–µ–Ω–∏–µ startParam –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ invite_user");
        startParam.value = null;
      },
      share_content: (contentId) => {
        if (contentId) {
          console.log("üì§ –û–±—â–∏–π –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É:", contentId);
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É
          // –ù–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ –æ–±—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        }
        // –û–±–Ω—É–ª—è–µ–º startParam, —á—Ç–æ–±—ã –æ–Ω –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        console.log("üßπ –û–±–Ω—É–ª–µ–Ω–∏–µ startParam –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ share_content");
        startParam.value = null;
      },
    };

    // –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if (handlers[action]) {
      console.log("‚úÖ –í—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è:", action);
      handlers[action](...args);
      console.log("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω:", action);
    } else {
      console.warn("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ startParam:", action);
      // –û–±–Ω—É–ª—è–µ–º startParam, —á—Ç–æ–±—ã –æ–Ω –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      console.log("üßπ –û–±–Ω—É–ª–µ–Ω–∏–µ startParam –ø–æ—Å–ª–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è");
      startParam.value = null;
    }
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram
   */
  const handleTelegramError = (error, retryCount, maxRetries) => {
    console.error("‚ùå Telegram WebApp error:", error);
    initializationError.value = error;

    if (retryCount < maxRetries) {
      setTimeout(() => {
        initTelegramWebAppWithRetry(retryCount + 1, maxRetries);
      }, 200);
    }
  };

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Telegram
   */
  const checkReadiness = (retryCount, maxRetries) => {
    setTimeout(() => {
      if (!isTelegramReady.value && retryCount < maxRetries) {
        console.log(
          `‚è≥ Telegram –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ #${retryCount + 1}`
        );
        initTelegramWebAppWithRetry(retryCount + 1, maxRetries);
      } else if (!isTelegramReady.value) {
        console.warn(
          `‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ (${maxRetries}), –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ Telegram`
        );
      }
    }, 300);
  };

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Telegram
   */
  const waitForTelegramReady = (timeout = 5000) => {
    return waitForCondition(() => isTelegramReady.value, timeout);
  };

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   */
  const logout = () => {
    clearJWTToken();
    jwtToken.value = null;
    console.log("üì§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã");
  };

  return {
    // State
    telegramUser,
    isTelegram,
    authHash,
    authData,
    startParam,
    themeParams,
    isDarkTheme,
    jwtToken,
    isTelegramReady,
    initializationError,

    // Auth
    authError,
    isAuthenticating,
    needsReauth,
    hasValidToken,

    // Methods
    sendAuthToServer: performAuth,
    getAuthData: getTelegramAuthData,
    refreshTheme: () => refreshTheme(getTelegramAuthData),
    applyThemeToApp,
    logout,
    waitForTelegramReady,
    saveJWTToken,
    clearJWTToken,
    checkTelegramIdConsistency,
    retryAuth,
    clearAuthError,
  };
}
