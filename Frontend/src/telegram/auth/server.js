import { useApi } from '../composables/useApi.js';

/**
 * –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
 */

export async function sendAuthToServer(
  authData,
  endpoint = "auth/telegram"
) {
  if (!authData?.hash) {
    console.warn("No auth hash available");
    throw new Error("No authentication data available");
  }

  // –î–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π fetch,
  // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  const apiUrl = `/api/${endpoint.replace(/^\//, '')}`;
  try {
    console.log(`üì§ Sending auth data to server:`, authData);

    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        initData: window.Telegram?.WebApp?.initData,
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(
        `Server responded with ${response.status}: ${errorText}`
      );
    }

    const result = await response.json();
    console.log("‚úÖ Auth data successfully sent to server:", result);

    return result;
  } catch (error) {
    console.error(`‚ùå Failed to send auth data to server:`, error.message);
    throw error;
  }
}

export function prepareAuthPayload(authData) {
  return {
    hash: authData.hash,
    initData: authData.initData,
    user: authData.user,
    authDate: authData.authDate,
    queryId: authData.queryId,
    theme: authData.themeParams,
    timestamp: Date.now(),
  };
}
