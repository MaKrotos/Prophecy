import { useApi } from '../composables/useApi.js';

/**
 * –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º
 */

export async function sendAuthToServer(
  authData,
  endpoint = "auth/telegram"
) {
  if (!authData?.hash) {
    console.warn("No auth hash available");
    throw new Error("No authentication data available");
  }

  const { apiPost } = useApi();
  try {
    console.log(`üì§ Sending auth data to server:`, authData);

    const response = await apiPost(endpoint, {
      initData: window.Telegram?.WebApp?.initData,
    }, {
      // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞,
      // —Ç–∞–∫ –∫–∞–∫ –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
      autoAuth: false
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(
        `Server responded with ${response.status}: ${errorText}`
      );
    }

    const result = await response.json();
    console.log("‚úÖ Auth data successfully sent to server:", result);

    return result;
  } catch (error) {
    console.error(`‚ùå Failed to send auth data to server:`, error.message);
    throw error;
  }
}

export function prepareAuthPayload(authData) {
  return {
    hash: authData.hash,
    initData: authData.initData,
    user: authData.user,
    authDate: authData.authDate,
    queryId: authData.queryId,
    theme: authData.themeParams,
    timestamp: Date.now(),
  };
}
