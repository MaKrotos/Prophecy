/**
 * –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JWT —Ç–æ–∫–µ–Ω–∞–º–∏
 */

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç JWT —Ç–æ–∫–µ–Ω –≤ localStorage
 * @param {string} token - JWT —Ç–æ–∫–µ–Ω
 */
export function saveJWTToken(token) {
  if (token) {
    localStorage.setItem("jwt_token", token);
    console.log("‚úÖ JWT —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage");
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏–∑ localStorage
 * @returns {string|null} JWT —Ç–æ–∫–µ–Ω –∏–ª–∏ null
 */
export function getJWTToken() {
  return localStorage.getItem("jwt_token");
}

/**
 * –£–¥–∞–ª—è–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏–∑ localStorage
 */
export function clearJWTToken() {
  localStorage.removeItem("jwt_token");
  console.log("üóëÔ∏è JWT —Ç–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω –∏–∑ localStorage");
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JWT —Ç–æ–∫–µ–Ω–∞
 * @param {string} token - JWT —Ç–æ–∫–µ–Ω
 * @returns {boolean} true –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, false –µ—Å–ª–∏ –Ω–µ—Ç
 */
export function isTokenValid(token) {
  if (!token || typeof token !== "string") return false;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 3 —á–∞—Å—Ç–µ–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–æ—á–∫–∞–º–∏
  const parts = token.split(".");
  if (parts.length !== 3) return false;

  const payloadPart = parts[1];
  if (!payloadPart) return false;

  try {
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64url
    const decodedPayload = decodeURIComponent(
      atob(payloadPart.replace(/-/g, "+").replace(/_/g, "/"))
        .split("")
        .map((c) => "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2))
        .join("")
    );

    const payload = JSON.parse(decodedPayload);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ payload –µ—Å—Ç—å –ø–æ–ª–µ exp
    if (!payload.exp) return false;

    const currentTime = Math.floor(Date.now() / 1000);
    return payload.exp > currentTime;
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:", e);
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ localStorage
 * @returns {boolean} true –µ—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —Ç–æ–∫–µ–Ω, false –µ—Å–ª–∏ –Ω–µ—Ç
 */
export function hasValidToken() {
  const token = getJWTToken();
  return isTokenValid(token);
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç JWT —Ç–æ–∫–µ–Ω –∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –∑–∞–ø—Ä–æ—Å–∞
 * @param {Object} headers - –û–±—ä–µ–∫—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
 * @returns {Object} –û–±—ä–µ–∫—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º Authorization
 */
export function addAuthHeader(headers = {}) {
  const token = getJWTToken();

  if (token && isTokenValid(token)) {
    return {
      ...headers,
      Authorization: `Bearer ${token}`,
    };
  }

  return headers;
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
 * @param {string} url - URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
 * @param {Object} options - –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
 * @param {number} maxRetries - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
 * @returns {Promise} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
 */
export async function authenticatedFetch(url, options = {}, maxRetries = 3) {
  let lastError;

  for (let attempt = 0; attempt <= maxRetries; attempt++) {
    try {
      const headers = addAuthHeader(options.headers || {});
      const response = await fetch(url, {
        ...options,
        headers,
      });

      if (response.status === 401) {
        // –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ—á–∏—â–∞–µ–º –µ–≥–æ
        clearJWTToken();
        throw new Error("–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω");
      }

      return response;
    } catch (error) {
      lastError = error;
      console.warn(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error.message);

      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∂–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
      if (attempt < maxRetries) {
        // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1s, 2s, 4s, ...
        const delay = Math.pow(2, attempt) * 1000;
        await new Promise((resolve) => setTimeout(resolve, delay));
      }
    }
  }

  // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
  throw lastError;
}
